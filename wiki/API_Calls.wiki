#summary API calls to be made to radio reddit and reddit

= Introduction =

This document is to show how to make the API calls to radio reddit


= Getting Streams Information =

Make a call to http://radioreddit.com/config/streams.json to get a list of all the streams.

The json returns a List of RadioStreams.

A RadioStream object consists of:
  * String Name (pulled from the parent JSON object)
  * String Description
  * String Relay (pulled from each stream's status.json "Relay")
  * Boolean Online (pulled from each stream's status.json "Online")
  * String Server (not used)
  * String Transcoder (not used)
  * String Status (This is the path to other JSON calls, e.g. /api/electronic maps to http://radioreddit.com/api/electronic/status.json, etc.)
  * String Playlists (another directory mapping? Seems to be for playing in browser, not used)
  * List of Relays (list of stream addresses, not used)

A Relay object consists of
  * String Server (address to stream from, not used. Pull the one from status.json instead)

Stream information should be only called onCreate and should not need to be called again during lifecycle of the application

For now, stream information will be kept in memory in Application object. Later, maybe save it to a database? (E.g. to handle case of web server goes down but stream is still up)

= Getting Song Information =

Make a call to http://radioreddit.com(API)status.json to get the stream's current status. (API) is pulled from the streams.json's "Status" variable. For example, http://radioreddit.com/api/electronic/status.json is for electronic stream.

The json returns a List of Songs, the current playlist, online status, relay, and number of listeners

A Song object consists of:
  * Int ID (not used?)
  * String Title
  * String Artist
  * String redditor (note: return Artist (redditor) as one String)
  * String Genre
  * String Playlist (pulled from parent node)
  * String reddit_title (Name of reddit link)
  * String reddit_url (reddit link)
  * String preview_url (Used for previewing song? Always exists?)
  * String download_url (Used for downloading song? Different url, but same mp3 as preview_url? May not exist)
  * String bandcamp_link (Link to song on bandcamp, May not exist)
  * String bancamp_art (album art from bandcamp, May not exist)
  * String itunes_link (Link to song on itunes, May not exist)
  * String itunes_art (Link to album art from itunes, May not exist)
  * String itunes_price (Price of song on itunes, May not exist)
  * Int score (Must call http://www.reddit.com/api/info.json?url=(URL ENCODED reddit_url) and get "score". Example: http://www.reddit.com/api/info.json?url=http%3A%2F%2Fwww.radioreddit.com%2Fsongs%2F%3Fsong%3DBlack_Water_%2528zoq-fot-pik%2529_On_A_Grid )
  
= List of all API calls (from iOS version) =

//RadioRedditServer stuff

NSString * const RadioRedditBaseURL = @"http://radioreddit.com";

NSString * const RadioRedditStreamsJSON = @"http://radioreddit.com/config/streams.json";

NSString * const RadioRedditChartsAll = @"http://radioreddit.com/api/charts_all.json";

NSString * const RadioRedditChartsMonth = @"http://radioreddit.com/api/charts_month.json";

NSString * const RadioRedditChartsWeek = @"http://radioreddit.com/api/charts_week.json";

NSString * const RadioRedditChartsDay = @"http://radioreddit.com/api/charts_day.json";


//reddit links

NSString * const RedditLoginURL = @"http://www.reddit.com/api/login";

NSString * const RedditVoteURL = @"http://www.reddit.com/api/vote";

NSString * const RedditSaveURL = @"http://www.reddit.com/api/save";

NSString * const RedditUnsaveURL = @"http://www.reddit.com/api/unsave";

NSString * const RedditLinkByURL = @"http://www.reddit.com/api/info.json?url=";

NSString * const RedditGetSavedURL = @"http://www.reddit.com/saved.json";

NSString * const RedditSubmitURL = @"http://www.reddit.com/api/submit";

NSString * const RedditCaptchaURL = @"http://www.reddit.com/captcha/";

= My API requests =

A short list of things I'd like to see in the API:
  * A better "name" of the station, e.g. "hiphop" vs "Hip Hop and Rap" (add to streams.json)
  * Amazon MP3 purchase links (for Android users)
  * A value that returns true when the station is playing an advertisement (for promoting donations, pro versions, etc.). Add to stream's status.json